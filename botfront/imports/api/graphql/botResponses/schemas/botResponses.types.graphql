type Query {
    botResponses(projectId: String!): [BotResponse!]
    botResponse(projectId: String!, key: String!, lang: String): BotResponse
    botResponseById(_id: String): BotResponse
    getResponse(
        template: StringOrListOfStrings!
        arguments: NlgRequestArguments
        tracker: ConversationInput
        channel: NlgRequestChannel
    ): BotResponsePayload,
}

type Subscription {
    botResponseAdded(projectId: String!): BotResponse
    botResponsesModified(projectId: String!): BotResponse
    botResponseDeleted(projectId: String!): BotResponse
}

type Mutation {
    deleteResponse(projectId: String!, key: String!): updateResponse!
    updateResponse(
        projectId: String!
        _id: String!
        response: BotResponseInput
    ): updateResponse!

    upsertResponse(
        projectId: String!
        language: String!
        newPayload: Any
        key: String!
    ): BotResponse
    
    createResponse(projectId: String!, response: BotResponseInput): updateResponse!
    createResponses(projectId: String!, responses: String): updateResponse!
}

type updateResponse {
    success: Boolean!
}

type BotResponse {
    key: String
    _id: String
    projectId: String
    values: [BotResponseValue]
    metadata: Any
}

type BotResponseValue {
    lang: String
    sequence: [ContentContainer]
}

type ContentContainer {
    content: String
}

input BotResponseInput {
    key: String
    _id: String
    projectId: String
    values: [BotResponseValueInput]
    metadata: Any
}

input BotResponseValueInput {
    lang: String
    sequence: [ContentContainerInput]
}

input ContentContainerInput {
    content: String
}

input NlgRequestArguments {
    projectId: String!
    language: StringOrListOfStrings!
}

input NlgRequestChannel {
    name: String
}

type FutureBotResponse {
    _id: String!
    key: String!
    projectId: String!
    variants: [BotResponseVariant!]!
    metadata: Any
}

type BotResponseVariant {
    language: String!
    channel: String
    payload: BotResponsePayload!
}

interface BotResponsePayload {
    metadata: Any
    text: String
}

type TextPayload implements BotResponsePayload {
    text: String!
    metadata: Any
}

type QuickReplyPayload implements BotResponsePayload {
    text: String
    buttons: [Button!]
    metadata: Any
}

type ImagePayload implements BotResponsePayload {
    text: String
    image: String
    metadata: Any
}

type CustomPayload implements BotResponsePayload {
    text: String
    buttons: [Button!]
    elements: [Any!]
    attachment: Any
    image: String
    custom: Any
    metadata: Any
}

interface Button {
    title: String!
    type: ButtonType!
}

type PostbackButton implements Button {
    title: String!
    type: ButtonType!
    payload: String
}

type WebUrlButton implements Button {
    title: String!
    type: ButtonType!
    url: String
}

enum ButtonType {
    postback
    web_url
}

